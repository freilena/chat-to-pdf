name: CI

on:
  push:           # Run on all commits/pushes to any branch
  pull_request:   # Run on all pull requests

jobs:
  backend-lint:
    name: Backend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'api/requirements.txt'
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run ruff linting
        working-directory: ./api
        run: ruff check .

  backend-typecheck:
    name: Backend Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'api/requirements.txt'
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run mypy type checking
        working-directory: ./api
        run: PYTHONPATH=. mypy app

  backend-tests:
    name: Backend Tests (Core)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'api/requirements.txt'
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Cache embedding model
        uses: actions/cache@v4
        with:
          path: ~/.cache/huggingface
          key: ${{ runner.os }}-huggingface-all-MiniLM-L6-v2
      
      - name: Run pytest (excluding OpenAI tests)
        working-directory: ./api
        run: |
          PYTHONPATH=. pytest tests/ -v \
            --ignore=tests/test_openai.py \
            --ignore=tests/test_openai_endpoints.py \
            --ignore=tests/test_openai_security.py \
            --ignore=tests/test_openai_smoke.py \
            --ignore=tests/test_query_with_openai.py \
            --ignore=tests/test_e2e_openai_integration.py

  openai-tests-mocked:
    name: OpenAI Tests (Mocked - No Cost)
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'api/requirements.txt'
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run OpenAI mocked tests
        working-directory: ./api
        run: |
          PYTHONPATH=. pytest \
            tests/test_openai.py \
            tests/test_openai_endpoints.py \
            tests/test_openai_security.py \
            tests/test_query_with_openai.py \
            -v
        env:
          # These tests are fully mocked - no real API calls
          OPENAI_API_KEY: "sk-test-mock-key-for-ci"
          OPENAI_MODEL: "gpt-4o-mini"

  openai-smoke-test:
    name: OpenAI Smoke Test (Real API - Minimal Cost)
    runs-on: ubuntu-latest
    # Only run on main branch to minimize API costs
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/feature/openai-integration'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Python 3.11
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'
          cache: 'pip'
          cache-dependency-path: 'api/requirements.txt'
      
      - name: Install dependencies
        working-directory: ./api
        run: |
          pip install --upgrade pip
          pip install -r requirements.txt
      
      - name: Run OpenAI smoke test
        working-directory: ./api
        run: PYTHONPATH=. pytest tests/test_openai_smoke.py -v -s
        env:
          OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
          OPENAI_MODEL: "gpt-4o-mini"
      
      - name: Report cost (informational)
        if: always()
        run: echo "ðŸ’° Smoke test cost - ~\$0.000001 (one millionth of a dollar)"

  frontend-lint:
    name: Frontend Linting
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./web
        run: npm ci
      
      - name: Run eslint
        working-directory: ./web
        run: npm run lint

  frontend-typecheck:
    name: Frontend Type Checking
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./web
        run: npm ci
      
      - name: Run TypeScript type checking
        working-directory: ./web
        run: npx tsc --noEmit

  frontend-tests:
    name: Frontend Tests
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Set up Node.js 20
        uses: actions/setup-node@v4
        with:
          node-version: '20'
          cache: 'npm'
          cache-dependency-path: 'web/package-lock.json'
      
      - name: Install dependencies
        working-directory: ./web
        run: npm ci
      
      - name: Run vitest
        working-directory: ./web
        run: npm run test
